%{
#include <stdio.h>
#include <stdlib.h>
#include "tokens.h"	
#include "hash.h"

HASH_TABLE hashTable;
int LineNumber = 1;
int runningFlag = 1;

void initMe(void);
int getLineNumber(void);
int isRunning(void);
char* subString (const char* input, int offset, int len, char* dest);

%}

%x COMM

%%

true	{ 
	hashInsert(&hashTable, LIT_TRUE, yytext);
	return LIT_TRUE;
}
false	{ 
	hashInsert(&hashTable, LIT_FALSE, yytext);
	return LIT_FALSE;
} 

[a-zA-Z_][a-zA-Z0-9_]*	{ 
	hashInsert(&hashTable, TK_IDENTIFIER, yytext); 
	return TK_IDENTIFIER; 
}

[0-9][0-9a-fA-F]*	{ 
	hashInsert(&hashTable, LIT_INTEGER, yytext);
	return LIT_INTEGER; 
}

'.'	{ 
	hashInsert(&hashTable, LIT_CHAR, yytext);
	return LIT_CHAR; 
}   

["][^"]*["]	{
	hashInsert(&hashTable, LIT_STRING, yytext);
	return LIT_STRING;
}

","|";"|":"|"("|")"|"["|"]"|"{"|"}"|"+"|"-"|"*"|"/"|"<"|">"|"="|"!"|"&"|"$"	{ return yytext[0]; }

"<="		{ return OPERATOR_LE; }
">="		{ return OPERATOR_GE; }
"=="		{ return OPERATOR_EQ; }
"!="		{ return OPERATOR_NE; }
"&&"		{ return OPERATOR_AND; }
"||"		{ return OPERATOR_OR; }


\/\/.*		{ }
"/*"		BEGIN (COMM);

"\n"		{ ++LineNumber; }
[ \t\v\f]+	{ }

.		{ return TOKEN_ERROR; }

<COMM>"*/"	BEGIN(INITIAL);
<COMM>.		{}
<COMM>"\n"	{ ++LineNumber; } 

%%

#include "main.c"

void initMe(void)
{
	hashInit(&hashTable);
}

int getLineNumber(void)
{
	return LineNumber;
}

int isRunning(void){
	return runningFlag;
}

int yywrap()
{
	runningFlag = 0;
	return 1;
}

char* subString (const char* input, int offset, int len, char* dest)
{
  int input_len = strlen (input);

  if (offset + len > input_len)
  {
     return NULL;
  }

  strncpy (dest, input + offset, len);
  return dest;
}

